with(RF_image_2_c, image.plot(as.image(x=cbind(x,y), Z=RF, nrow=10,
ncol=10),xlab='x',ylab='y'))
par(mfrow=c(1,2), mar = c(2,1,2,0) )
with(RF_image_c, image.plot(as.image(x=cbind(x,y), Z=RF, nrow=10,
ncol=10),xlab='x',ylab='y', main="First filter"))
with(RF_image_2_c, image.plot(as.image(x=cbind(x,y), Z=RF, nrow=10,
ncol=10),xlab='x',ylab='y', main="Second filter"))
par(mfrow=c(1,2), mar = c(2,2,2,0) )
with(RF_image_c, image.plot(as.image(x=cbind(x,y), Z=RF, nrow=10,
ncol=10),xlab='x',ylab='y', main="First filter"))
with(RF_image_2_c, image.plot(as.image(x=cbind(x,y), Z=RF, nrow=10,
ncol=10),xlab='x',ylab='y', main="Second filter"))
COV_complex = cov(Complex[,-1])
View(COV_complex)
View(COV_complex)
plot(COV_complex )
hist(COV_complex)
Eigen_complex = eigen(COV_complex, symmetric = TRUE)
View(Eigen_complex)
plot(Eigen_complex$values)
layout(1)
plot(Eigen_complex$values)
Eigen_complex$values[1:2]
Eigen_complex$vectors %>% View()
V_1_complex = Eigen_complex$vectors[,1]
V_2_complex = Eigen_complex$vectors[,2]
V_1_complex = data.frame(I=Eigen_complex$vectors[,1], x = CTC_10000$complex$x, y = CTC_10000$complex$y)
V_2_complex = data.frame(I=Eigen_complex$vectors[,2], x = CTC_10000$complex$x, y = CTC_10000$complex$y)
names(COV_complex)
colnames(COV_complex)
colnames(COV_complex) %>% strsplit(split=" ")
xy = colnames(COV_complex) %>% strsplit(split=" ") %>% ldply(function(s) data.frame(x=s[1], y=s[2]))
View(xy)
V_1_complex = data.frame(I=Eigen_complex$vectors[,1], x = xy$x, y=xy$y)
V_2_complex = data.frame(I=Eigen_complex$vectors[,2], x = xy$x, y=xy$y)
plot(Eigen_complex$values, xlab = "Eigenvalue number", ylab = "Variance")
plot(Eigen_complex$values, xlab = "Eigenvalue number", ylab = "Variance", main="Complex cell")
par(mfrow=c(1,1), mar= c(3,3,3,0))
plot(Eigen_complex$values, xlab = "Eigenvalue number", ylab = "Variance", main="Complex cell")
par(mfrow=c(1,1), mar= c(4,4,4,0))
plot(Eigen_complex$values, xlab = "Eigenvalue number", ylab = "Variance", main="Complex cell")
par(mfrow=c(1,2), mar= c(3,3,2,1))
with(V_1_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, First eigenvector", cex.main = 0.8))
with(V_2_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, Second eigenvector", cex.main = 0.8))
V_1_complex
str(V_1_complex)
V_1_complex = data.frame(I=Eigen_complex$vectors[,1], x = xy$x, y=xy$y) %>% as.numeric()
V_2_complex = data.frame(I=Eigen_complex$vectors[,2], x = xy$x, y=xy$y) %>% as.numeric()
par(mfrow=c(1,2), mar= c(3,3,2,1))
with(V_1_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, First eigenvector", cex.main = 0.8))
with(V_2_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, Second eigenvector", cex.main = 0.8))
#take two vectors with distintively high eigenvalues
V_1_complex = data.frame(I=Eigen_complex$vectors[,1], x = xy$x %>% as.numeric(), y=xy$y %>% as.numeric())
with(V_1_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, First eigenvector", cex.main = 0.8))
par(mfrow=c(1,2), mar= c(3,3,2,1))
with(V_1_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, First eigenvector", cex.main = 0.8))
with(V_2_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, Second eigenvector", cex.main = 0.8))
V_1_complex = data.frame(I=Eigen_complex$vectors[,1],
x = xy$x %>% as.numeric(), y=xy$y %>% as.numeric())
V_2_complex = data.frame(I=Eigen_complex$vectors[,2],
x = xy$x %>% as.numeric(), y=xy$y %>% as.numeric())
par(mfrow=c(1,2), mar= c(3,3,2,1))
with(V_1_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, First eigenvector", cex.main = 0.8))
with(V_2_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, Second eigenvector", cex.main = 0.8))
par(mfrow=c(1,2), mar= c(0,0,2,0))
with(V_1_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, First eigenvector", cex.main = 0.8))
with(V_2_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, Second eigenvector", cex.main = 0.8))
par(mfrow=c(1,2), mar= c(1,1,2,0))
with(V_1_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, First eigenvector", cex.main = 0.8))
with(V_2_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, Second eigenvector", cex.main = 0.8))
?image.plot
with(V_1_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, First eigenvector", cex.main = 0.8,
breaks=seq(-0.5, 0.5, by=0.1)))
seq(-0.5, 0.5, by=0.1)
with(V_1_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, First eigenvector", cex.main = 0.8,
breaks=seq(-0.5, 0.5, length.out = 65)))
with(V_2_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, Second eigenvector", cex.main = 0.8,
breaks=seq(-0.5, 0.5, length.out = 65)))
par(mfrow=c(1,2), mar= c(2,1,2,0))
with(V_1_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, First eigenvector", cex.main = 0.8,
breaks=seq(-0.5, 0.5, length.out = 65)))
with(V_2_complex, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="Complex cell, Second eigenvector", cex.main = 0.8,
breaks=seq(-0.5, 0.5, length.out = 65)))
with(RF_image_c, image.plot(as.image(x=cbind(x,y), Z=RF, nrow=10,
ncol=10),xlab='x',ylab='y', main="First filter"))
with(RF_image_2_c, image.plot(as.image(x=cbind(x,y), Z=RF, nrow=10,
ncol=10),xlab='x',ylab='y', main="Second filter"))
with(RF_image_c, image.plot(as.image(x=cbind(x,y), Z=RF, nrow=10,
ncol=10),xlab='x',ylab='y', main="First filter",
breaks=seq(-0.05, 0.05, length.out = 65)))
with(RF_image_2_c, image.plot(as.image(x=cbind(x,y), Z=RF, nrow=10,
ncol=10),xlab='x',ylab='y', main="Second filter",
breaks=seq(-0.05, 0.05, length.out = 65)))
with(RF_image_c, image.plot(as.image(x=cbind(x,y), Z=RF, nrow=10,
ncol=10),xlab='x',ylab='y', main="First filter",
breaks=seq(-0.06, 0.06, length.out = 65)))
with(RF_image_2_c, image.plot(as.image(x=cbind(x,y), Z=RF, nrow=10,
ncol=10),xlab='x',ylab='y', main="Second filter",
breaks=seq(-0.06, 0.06, length.out = 65)))
par(mfrow=c(1,1), mar= c(4,4,4,0))
plot(Eigen_complex$values, xlab = "Eigenvalue number", ylab = "Variance", main="Complex cell")
plot(Eigen_complex$values, xlab = "Eigenvalue number", ylab = "Variance", main="Complex cell",
pch=16)
par(mfrow=c(1,1), mar= c(4,4,2,0))
plot(Eigen_complex$values, xlab = "Eigenvalue number", ylab = "Variance", main="Complex cell",
pch=16, cex.main =0.8)
####Simple cell
#convert to wide format (each pixel is a collumn - so 100 columns)
CTC_10000$simple$xy=paste(CTC_10000$simple$x, CTC_10000$simple$y)
simple = tidyr::pivot_wider(CTC_10000$simple, id_cols = "trial", names_from = "xy",
values_from = "I")
#covariance matrix
COV_simple = cov(simple[,-1])
xy = colnames(COV_simple) %>% strsplit(split=" ") %>% ldply(function(s) data.frame(x=s[1], y=s[2]))
Eigen_simple = eigen(COV_simple, symmetric = TRUE)
par(mfrow=c(1,1), mar= c(4,4,2,0))
plot(Eigen_simple$values, xlab = "Eigenvalue number", ylab = "Variance", main="simple cell",
pch=16, cex.main =0.8)
V_1_simple = data.frame(I=Eigen_simple$vectors[,nrow(Eigen_simple$vectors)],
x = xy$x %>% as.numeric(), y=xy$y %>% as.numeric())
par(mfrow=c(1,1), mar= c(3,3,2,0))
plot(Eigen_simple$values, xlab = "Eigenvalue number", ylab = "Variance", main="simple cell",
pch=16, cex.main =0.8, cex.lab = 0.8)
par(mfrow=c(1,1), mar= c(4,4,2,0))
plot(Eigen_simple$values, xlab = "Eigenvalue number", ylab = "Variance", main="simple cell",
pch=16, cex.main =0.8, cex.lab = 0.8)
par(mfrow=c(1,2), mar= c(4,4,2,0))
plot(Eigen_simple$values, xlab = "Eigenvalue number", ylab = "Variance", main="simple cell",
pch=16, cex.main =0.8, cex.lab = 0.8)
V_1_simple = data.frame(I=Eigen_simple$vectors[,nrow(Eigen_simple$vectors)],
x = xy$x %>% as.numeric(), y=xy$y %>% as.numeric())
with(V_1_simple, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="simple cell, Last eigenvector", cex.main = 0.8
))
par(mfrow=c(2,1), mar= c(4,4,2,0))
plot(Eigen_simple$values, xlab = "Eigenvalue number", ylab = "Variance", main="simple cell",
pch=16, cex.main =0.8, cex.lab = 0.8)
#take last vector with distintively lower eigenvalues
V_1_simple = data.frame(I=Eigen_simple$vectors[,nrow(Eigen_simple$vectors)],
x = xy$x %>% as.numeric(), y=xy$y %>% as.numeric())
with(V_1_simple, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="simple cell, Last eigenvector", cex.main = 0.8
))
par(mfrow=c(1,1), mar= c(4,4,2,0))
plot(Eigen_simple$values, xlab = "Eigenvalue number", ylab = "Variance", main="simple cell",
pch=16, cex.main =0.8, cex.lab = 0.8)
par(mfrow=c(1,1), mar= c(2,2,2,0))
with(V_1_simple, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="simple cell, Last eigenvector", cex.main = 0.8
))
adply(simple[,-1], 2, function(s) mean(s))
aaply(simple[,-1], 2, function(s) mean(s))
aaply(simple[,-1], 2, function(s) mean(s)^2)
STA_s_l = aaply(simple[,-1], 2, function(s) mean(s)^2) %>% sum()
STA_s_l
t = adply(simple[,-1], 2, {
s[[1]] = s[[1]] * mean(s[[1]])^2/STA_s_l
s})
t = adply(simple[,-1], 2, function(s) {
s[[1]] = s[[1]] * mean(s[[1]])^2/STA_s_l
s})
View(t)
View(t)
STA_s_l
t = adply(simple[,-1], 2, function(s) {
s[[1]] = s[[1]] * mean(s[[1]])^2/STA_s_l
data.frame(s)})
View(t)
View(t)
t = adply(simple[,-1], 2, function(s) {
s[[1]] = s[[1]] * mean(s[[1]])^2/STA_s_l
k = data.frame(s)
names(k) = names(s)
k})
View(t)
View(t)
for (i in 2:ncol(simple)) simple[,i] = simple[,i] * mean(simple[,i])^2/STA_s_l
View(simple)
View(simple)
COV_simple = cov(simple[,-1])
xy = colnames(COV_simple) %>% strsplit(split=" ") %>% ldply(function(s) data.frame(x=s[1], y=s[2]))
Eigen_simple = eigen(COV_simple, symmetric = TRUE)
par(mfrow=c(1,1), mar= c(4,4,2,0))
plot(Eigen_simple$values, xlab = "Eigenvalue number", ylab = "Variance", main="simple cell",
pch=16, cex.main =0.8, cex.lab = 0.8)
simple = tidyr::pivot_wider(CTC_10000$simple, id_cols = "trial", names_from = "xy",
values_from = "I")
##normalize the ST stimulus
#compute the square of length of STA
simple = simple[,-1]
STA_s_l = aaply(simple, 2, function(s) mean(s)^2) %>% sum()
STA_s = aaply(simple, 2, function(s) mean(s))
STA_s
STA_s_length = STA_s^2 %>% sum()
STA_s_length
i=1
(simple[i,] %*% STA_s)
simple[i,]
simple[1,]
str(simple)
simple = tidyr::pivot_wider(CTC_10000$simple, id_cols = "trial", names_from = "xy",
values_from = "I") %>% data.frame()
simple[i,]
simple = simple[,-1]
STA_s = aaply(simple, 2, function(s) mean(s))
STA_s_length = STA_s^2 %>% sum()
(simple[i,] %*% STA_s)
simple[i,]
STA_s
(simple[i,] %*% t(STA_s))
STA_s
t(simple[i,])
(t(simple[i,]) %*% STA_s)
length(simple[i,] )
length(STA_s)
(simple[i,] * STA_s)
sum(simple[i,] * STA_s)
simple[i,] %*% STA_s
t(STA_s)
(simple[i,] %*% t(STA_s))
(t(simple[i,]) %*% t(STA_s))
STA_s = adply(simple, 2, function(s) mean(s))
STA_s
simple[i,] %*% STA_s
class(simple[i,])
str(simple[i,])
str( STA_s)
(simple[i,] %*% STA_s$V1)
STA_s = aaply(simple, 2, function(s) mean(s))
for (i in 1:nrow(simple)) simple[i,] = simple[i,] - sum(simple[i,] %*% STA_s) * STA_s/STA_s_l
for (i in 1:nrow(simple)) simple[i,] = simple[i,] - sum(simple[i,] * STA_s) * STA_s/STA_s_l
#covariance matrix
COV_simple = cov(simple)
xy = colnames(COV_simple) %>% strsplit(split=" ") %>% ldply(function(s) data.frame(x=s[1], y=s[2]))
Eigen_simple = eigen(COV_simple, symmetric = TRUE)
par(mfrow=c(1,1), mar= c(4,4,2,0))
plot(Eigen_simple$values, xlab = "Eigenvalue number", ylab = "Variance", main="simple cell",
pch=16, cex.main =0.8, cex.lab = 0.8)
hist(STA_s)
sum(simple[i,] * STA_s) * STA_s/STA_s_l
simple = tidyr::pivot_wider(CTC_10000$simple, id_cols = "trial", names_from = "xy",
values_from = "I") %>% data.frame()
###project out STA from the ST stimulus
#compute STA and the square of length of STA
simple = simple[,-1]
STA_s = aaply(simple, 2, function(s) mean(s))
STA_s_length = STA_s^2 %>% sum()
#project out STA
for (i in 1:nrow(simple)) simple[i,] = simple[i,] - sum(simple[i,] * STA_s) * STA_s/STA_s_l
#covariance matrix
COV_simple = cov(simple)
xy = colnames(COV_simple) %>% strsplit(split=" ") %>% ldply(function(s) data.frame(x=s[1], y=s[2]))
Eigen_simple = eigen(COV_simple, symmetric = TRUE)
par(mfrow=c(1,1), mar= c(4,4,2,0))
plot(Eigen_simple$values, xlab = "Eigenvalue number", ylab = "Variance", main="simple cell",
pch=16, cex.main =0.8, cex.lab = 0.8)
#take last vector with distintively lower eigenvalues
V_1_simple = data.frame(I=Eigen_simple$vectors[,nrow(Eigen_simple$vectors)],
x = xy$x %>% as.numeric(), y=xy$y %>% as.numeric())
par(mfrow=c(1,1), mar= c(2,2,2,0))
with(V_1_simple, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="simple cell, Last eigenvector", cex.main = 0.8
))
V_1_simple
####Simple cell
#convert to wide format (each pixel is a collumn - so 100 columns)
CTC_10000$simple$xy=paste(CTC_10000$simple$x, CTC_10000$simple$y)
#take last vector with distintively lower eigenvalues
V_1_simple = data.frame(I=Eigen_simple$vectors[,nrow(Eigen_simple$vectors)],
x = xy$x %>% as.numeric(), y=xy$y %>% as.numeric())
par(mfrow=c(1,1), mar= c(2,2,2,0))
with(V_1_simple, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="simple cell, Last eigenvector", cex.main = 0.8
))
V_1_simple
xy
xy = colnames(COV_simple) %>% strsplit(split=" ") %>% ldply(function(s) data.frame(x=s[1], y=s[2]))
xy
colnames(COV_simple)
simple = tidyr::pivot_wider(CTC_10000$simple, id_cols = "trial", names_from = "xy",
values_from = "I") %>% data.frame()
simple
CTC_10000$simple$xy=paste(CTC_10000$simple$x, CTC_10000$simple$y)
simple = tidyr::pivot_wider(CTC_10000$simple, id_cols = "trial", names_from = "xy",
values_from = "I")
###project out STA from the ST stimulus
#compute STA and the square of length of STA
simple = simple[,-1]
STA_s = aaply(simple, 2, function(s) mean(s))
STA_s_length = STA_s^2 %>% sum()
#project out STA
for (i in 1:nrow(simple)) simple[i,] = simple[i,] - sum(simple[i,] * STA_s) * STA_s/STA_s_l
#covariance matrix
COV_simple = cov(simple)
xy = colnames(COV_simple) %>% strsplit(split=" ") %>% ldply(function(s) data.frame(x=s[1], y=s[2]))
Eigen_simple = eigen(COV_simple, symmetric = TRUE)
par(mfrow=c(1,1), mar= c(4,4,2,0))
plot(Eigen_simple$values, xlab = "Eigenvalue number", ylab = "Variance", main="simple cell",
pch=16, cex.main =0.8, cex.lab = 0.8)
#take last vector with distintively lower eigenvalues
V_1_simple = data.frame(I=Eigen_simple$vectors[,nrow(Eigen_simple$vectors)],
x = xy$x %>% as.numeric(), y=xy$y %>% as.numeric())
par(mfrow=c(1,1), mar= c(2,2,2,0))
with(V_1_simple, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="simple cell, Last eigenvector", cex.main = 0.8
))
CTC_10000$simple$xy=paste(CTC_10000$simple$x, CTC_10000$simple$y)
simple = tidyr::pivot_wider(CTC_10000$simple, id_cols = "trial", names_from = "xy",
values_from = "I")
###project out STA from the ST stimulus
#compute STA and the square of length of STA
# simple = simple[,-1]
# STA_s = aaply(simple, 2, function(s) mean(s))
# STA_s_length = STA_s^2 %>% sum()
#
# #project out STA
# for (i in 1:nrow(simple)) simple[i,] = simple[i,] - sum(simple[i,] * STA_s) * STA_s/STA_s_l
#covariance matrix
COV_simple = cov(simple)
xy = colnames(COV_simple) %>% strsplit(split=" ") %>% ldply(function(s) data.frame(x=s[1], y=s[2]))
Eigen_simple = eigen(COV_simple, symmetric = TRUE)
par(mfrow=c(1,1), mar= c(4,4,2,0))
plot(Eigen_simple$values, xlab = "Eigenvalue number", ylab = "Variance", main="simple cell",
pch=16, cex.main =0.8, cex.lab = 0.8)
#take last vector with distintively lower eigenvalues
V_1_simple = data.frame(I=Eigen_simple$vectors[,nrow(Eigen_simple$vectors)],
x = xy$x %>% as.numeric(), y=xy$y %>% as.numeric())
par(mfrow=c(1,1), mar= c(2,2,2,0))
with(V_1_simple, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="simple cell, Last eigenvector", cex.main = 0.8
))
CTC_10000$simple$xy=paste(CTC_10000$simple$x, CTC_10000$simple$y)
simple = tidyr::pivot_wider(CTC_10000$simple, id_cols = "trial", names_from = "xy",
values_from = "I")
simple = simple[,-1]
###project out STA from the ST stimulus
#compute STA and the square of length of STA
#
# STA_s = aaply(simple, 2, function(s) mean(s))
# STA_s_length = STA_s^2 %>% sum()
#
# #project out STA
# for (i in 1:nrow(simple)) simple[i,] = simple[i,] - sum(simple[i,] * STA_s) * STA_s/STA_s_l
#covariance matrix
COV_simple = cov(simple)
xy = colnames(COV_simple) %>% strsplit(split=" ") %>% ldply(function(s) data.frame(x=s[1], y=s[2]))
Eigen_simple = eigen(COV_simple, symmetric = TRUE)
par(mfrow=c(1,1), mar= c(4,4,2,0))
plot(Eigen_simple$values, xlab = "Eigenvalue number", ylab = "Variance", main="simple cell",
pch=16, cex.main =0.8, cex.lab = 0.8)
#take last vector with distintively lower eigenvalues
V_1_simple = data.frame(I=Eigen_simple$vectors[,nrow(Eigen_simple$vectors)],
x = xy$x %>% as.numeric(), y=xy$y %>% as.numeric())
par(mfrow=c(1,1), mar= c(2,2,2,0))
with(V_1_simple, image.plot(as.image(x=cbind(x,y), Z=I, nrow=10,
ncol=10),xlab='x',ylab='y',
main="simple cell, Last eigenvector", cex.main = 0.8
))
.libPaths()
library("openxlsx")
?addStyle
getwd()
setwd("C:/R/Teaching/Git/Data")
getwd()
#другой способ - использовать двойной прямой слеш
setwd("C:\\R\\Teaching\\Git\\Data")
?read.xlsx
films<-read.xlsx(xlsxFile = "film.xlsx") #загружает как data.frame
View(films)
#
films<-read.xlsx(xlsxFile="C:/R/Teaching/Git/Data/film.xlsx") #можно и весь путь прописать, если не в папке по умолчанию
str(films)
titanic<-read.xlsx(xlsxFile="C:/R/Teaching/Git/Data/film.xlsx", sheet=2) #загружаем со второго листа
View(titanic)
comedies<-films[films$Subject=="Comedy"&films$Awards=="Yes", ]
?write.xlsx
#теперь выгружаем (сохраняем) новую data.frame на диск
write.xlsx(comedies, file="Comedies with awards.xlsx") #! нет знака присваивания
View(comedies)
View(comedies)
s<- read.xlsx("bbwinteract_AK.xls")
unique(data_chick$Chick)
data_chick<-ChickWeight
unique(data_chick$Chick)
unique(data_chick)
table(c("M","T","K","M"))
table(data_chick$Chick)
table(data_chick [,c("Chick","Diet")])
tab<-table(data_chick [,c("Chick","Time")])
tab
str(tab)
tab[1,2]
tab[1,]
as.data.frame(tab)
name<-"Anna"
age<-17
paste(name,"is", age,"years old", sep=" ")
paste(name,"is", age,"years old", sep="_") #sep - разделитель, в нашем случае пробел
paste(data_chick$Chick,data_chick$Time,sep="_")
data_chick$ID<-paste(data_chick$Chick,data_chick$Time,sep="_")
View(data_chick)
View(data_chick)
with(data_chick, paste("Maximum weight was", max(weight), "brought by chicken", Chick[weight=max(weight)],
"with Diet", Diet[weight=max(weight)], sep=" ")) #sep - разделитель, в нашем случае пробел
with(data_chick, weight[1:2])
with(data_chick, paste("Minimum weight was reached at", Time[weight=min(weight)], "by chicken", Chick[weight=min(weight)]
))
with(data_chick, paste("Minimum weight was reached at", Time[weight==min(weight)], "by chicken", Chick[weight==min(weight)]
))
with(data_chick, paste("Maximum weight was", max(weight), "brought by chicken", Chick[weight==max(weight)],
"with Diet", Diet[weight==max(weight)], sep=" "))
library("plyr")
data_chick<-arrange(data_chick, Chick)
View(data_chick)
View(data_chick)
levels(data_chick$Chick)
levels(data_chick$Chick)
data_chick<-arrange(data_chick, Chick, decreasing = TRUE)
arrange(data_chick, Diet, Chick,Time)
data_chick<-arrange(data_chick, Diet, Chick,Time) #сначала по Diet, потом по Chick (внутри каждой Diet)
range(data_chick$weight)
data_chick_12<-data_chick[data_chick$Chick==12,]
data_chick_12$weight
diff(data_chick_12$weight)
diff(c(1,3))
data_chick_12$diff_weight<-c(NA,diff(data_chick_12$weight))
View(data_chick_12)
View(data_chick_12)
cumsum(1:100)
1:100
sum(1:100)
cumsum(c(0,data_chick_12$diff_weight[-1]))
data_chick_12$weight[1]
cumsum(c(0,data_chick_12$diff_weight[-1]))+data_chick_12$weight[1]
data_chick_12$weight
which.min(data_chick$weight)
data_chick$weight
data_chick$Chick[which.min(data_chick$weight)]
data_chick_12$Time[which.max(data_chick_12$diff_weight)] #в каком возрасте набрал максимальный вес
which.min(data_chick$weight-data_chick$Diet)
which.min(data_chick$weight-mean(data_chick$weight))
data_chick$weight-mean(data_chick$weight)
which.min(data_chick$weight-(data_chick$weight)^2)
data_chick$weight-(data_chick$weight)^2
######в каком возрасте (кроме нуля) у цыпленка 12 была максимальная средняя скорость роста (weight/Time)
data_12 <- subset(data_chick, Chick==12&Time!=0)
with(data_12, Time[which.max(weight/Time)])
library("magrittr")
head_15 <- head(subset(data_chick, Chick %in% c(16,20,21)),15)
head_15 <- data_chick %>%
subset(Chick %in% c(16,20,21)) %>%
head(15)
head_15
head_15 <- data_chick %>% subset(Chick %in% c(16,20,21)) %>%               head(15)
mean_weight <- mean(subset (data_chick, Chick %in% c(16,20,21))$weight)
mean_weight <- subset (data_chick, Chick %in% c(16,20,21)) %>%
.$weight %>%
mean()
sum<- subset (data_chick, Chick %in% c(16,20,21)) %>%
.[1:15,2] %>%
sum()
? round
sq_mean_weight <- data_chick %>%
subset (Chick %in% c(16,20,21)) %>%
.$weight %>%
.[1:15] %>%
mean() %>%
sqrt() %>%
round(digits=2)
